theory Test
imports Main
begin
value "list_all f [1,2,5]"
datatype 
  bit = One 
  | Zero
fun test :: "bit option \<Rightarrow> bool" where 
  " test x = (if x = None then False else True)"

value "succ (1\<mapsto>x)"

definition all_states :: "'a set \<Rightarrow> 'b option set \<Rightarrow> ('a \<rightharpoonup>'b) set " where 
"all_states d r = {m. (\<exists>a\<in>d.\<exists>b\<in>r. m a = b)}"

value "set [1,2::nat]"
value "all {True, False}"
value "concat [[1,2],[3::nat]]"
value "\<Union> {{1,2}, {3::nat}}"
thm Set.all_mono

end